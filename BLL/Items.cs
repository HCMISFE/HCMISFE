
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using DAL;
using System.Collections;
using System.Linq;



namespace BLL
{
    public class Items : _Items
    {
        public Items()
        {

        }

        /// <summary>
        /// Loads the Products by the mapping ID and returns the ID
        /// Note: The Code Column has been used for the puspose of mapping
        /// </summary>
        /// <param name="mappingID"></param>
        /// <returns>The ID of the Product table</returns>
        public int LoadByMappingID(int mappingID)
        {
            this.FlushData();
            this.Where.Code.Value = mappingID.ToString();
            this.Query.Load();
            if (this.RowCount > 0)
            {
                return this.ID;
            }
            else
            {
                return -1;
            }
        }

        public bool IsMapped
        {
            get { return !this.IsColumnNull("Code"); }
        }

        public int? MappingID
        {
            get { return this.IsColumnNull("Code") ? (int?)null : int.Parse(this.Code.ToString()); }
        }


        /// <summary> 
        /// Only works after the GetAllItems() function is called.
        /// </summary>
        public String FullItemName
        {

            get
            {
                String name = "";
                try
                {
                    name = DataRow["FullItemName"].ToString();
                }
                catch { }
                return name;
            }
        }

        public long TotalQuantityLeftInAllBatches(int storeID)
        {

            string query =
                string.Format(
                    "select SUM(QuantityLeft) Total from ReceiveDoc where itemid={0} and StoreID={1} group by ItemID",
                    this.ID, storeID);
            BLL.Items temp = new Items();
            temp.LoadFromRawSql(query);
            if (temp.RowCount > 0)
            {
                return long.Parse(temp.GetColumn("Total").ToString());
            }
            return 0;
        }

        public DataTable GetItemsWithLastIssuedOrDisposedDate()
        {
            const string query = "select distinct * from Items itm left join (select ItemID, DATEDIFF(dd,max(Date),GETDATE()) as DaysOutOfStock from (select ItemID,Date from (select id.ItemID ItemID,max(id.EurDate) Date from IssueDoc id where id.ItemID in (select ItemID from ReceiveDoc rd group by ItemID having sum(rd.QuantityLeft)=0) group by id.ItemID) x union (select d.ItemID ItemID,max(d.EurDate) Date from Disposal d where ItemID in (select ItemID from ReceiveDoc rd group by ItemID having sum(rd.QuantityLeft)=0) group by d.ItemID)) x group by x.ItemID ) as y on itm.ID=y.ItemID";
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

        public static DataTable AllYears()
        {
            Items itm = new Items();
            itm.FlushData();
            itm.LoadFromRawSql(@"SELECT Distinct YEAR(Date)as year from ReceiveDoc
                                    union 
                                    select distinct YEAR(date) as year from IssueDoc
                                    union
                                    select distinct YEAR(date) as year from Disposal
                                    order by year desc");
            return itm.DataTable;
        }

        public static DataTable AllFiscalYears()
        {
            string query = @"select distinct year(date) as year from receivedoc
                            where month(date)<=10
                            union
                            select year(date)+1 as year from receivedoc
                            where month(date)>10
                            union
                            select distinct year(date) as year from issuedoc
                            where month(date)<=10
                            union
                            select year(date)+1 as year from issuedoc
                            where month(date)>10
                            union
                            select distinct year(date) as year from disposal
                            where month(date)<=10
                            union
                            select year(date)+1 as year from disposal
                            where month(date)>10";
            BLL.Items itm = new Items();
            itm.LoadFromRawSql(query);
            return itm.DataTable;
        }

        /// <summary>
        ///  Returns the commodites by type
        /// </summary>
        /// <param name="commodityType">0 - All Items</param>
        /// <returns></returns>
        public static DataTable GetActiveItemsByCommodityType(int commodityType)
        {
            string query = "";

            // let 0 mean all items
            if (commodityType == 0)
            {
                query = string.Format("select v.Name as CommodityType,v.TypeID , *, " +
                                  " CASE WHEN (SELECT COUNT(*) from ItemManufacturer i where i.ItemID = v.ID) > 0 then 1 else 0 end as HasManufacturer, IsSelected = cast( 0 as bit) " +
                                  " from vwGetAllItems v where v.IsInHospitalList = 1 " +
                                  "  ORDER BY v.FullItemName");
            }
            else
            {
                query = string.Format("select v.Name as CommodityType, v.TypeID , *, " +
                                  " CASE WHEN (SELECT COUNT(*) from ItemManufacturer i where i.ItemID = v.ID) > 0 then 1 else 0 end as HasManufacturer, IsSelected = cast( 0 as bit) " +
                                  " from vwGetAllItems v " +
                                  " where v.IsInHospitalList = 1 and v.TypeID = '{0}' ORDER BY v.FullItemName",
                                  commodityType);
            }

            Items itms = new Items();
            itms.LoadFromRawSql(query);
            return itms.DataTable;
        }

        public DataTable GetAllItems(int inList)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT ROW_NUMBER() OVER (ORDER BY FullItemName) AS No, case when ID IN (SELECT ItemID FROM  dbo.ReceiveDoc) Then 'Yes' Else 'No' END AS BeenReceived, * FROM vwGetAllItems WHERE IsInHospitalList = {0} ORDER BY ItemName", inList));
            return this.DataTable;
        }

        public DataTable GetAllItems(int inList,int commodityTypeID)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT ROW_NUMBER() OVER (ORDER BY FullItemName) AS No, case when ID IN (SELECT ItemID FROM  dbo.ReceiveDoc) Then 'Yes' Else 'No' END AS BeenReceived, * FROM vwGetAllItems WHERE IsInHospitalList = {0} AND TypeID = {1} ORDER BY ItemName", inList, commodityTypeID));
            return this.DataTable;
        }

        public DataTable GetAllItems(int inList, int storeId, int commodityTypeID)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT ROW_NUMBER() OVER (ORDER BY FullItemName) AS No, case when ID IN (SELECT ItemID FROM  dbo.ReceiveDoc Where StoreID = {1}) Then 'Yes' Else 'No' END AS BeenReceived, * FROM vwGetAllItems WHERE IsInHospitalList = {0} AND TypeID = {2} ORDER BY ItemName", inList, storeId,commodityTypeID));
            return this.DataTable;
        }
        /**
         * The difference between this and the other default one is that this one loads the item with all the neccessary realtionship datas
         * */
        public Boolean GetItemByPrimaryKey(int pk)
        {
            this.FlushData();
            return this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE ID = {0}", pk));
        }

        public int CountAllItems()
        {
            this.FlushData();
            this.LoadFromRawSql("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND Name = 'Drug'");
            return this.DataTable.Rows.Count;
        }



        public int CountEDLItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND EDL = 0 AND Name = 'Drug'"));
            return this.DataTable.Rows.Count;
        }

        public DataTable GetEDLItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND EDL = 0 AND Name = 'Drug'"));
            return this.DataTable;
        }

        public int CountFreeItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND IsFree = 1 AND Name = 'Drug'"));
            return this.DataTable.Rows.Count;
        }

        public DataTable GetFreeItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND IsFree = 1 AND Name = 'Drug'"));
            return this.DataTable;
        }

        public DataTable GetVitalItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND VEN = 'V' AND Name = 'Drug'"));
            return this.DataTable;
        }

        public int CountRefrigeratedItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND Name = 'Drug' AND Refrigeratored = 1"));
            return this.DataTable.Rows.Count;
        }

        public DataTable GetRefrigeratedItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND Name = 'Drug' AND Refrigeratored = 1"));
            return this.DataTable;
        }

        public int CountPediatricItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND Name = 'Drug' AND Pediatric = 1"));
            return this.DataTable.Rows.Count;
        }

        public DataTable GetPediatricItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND Name = 'Drug' AND Pediatric = 1"));
            return this.DataTable;
        }

        public DataTable GetAllItem()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT ROW_NUMBER() OVER (ORDER BY FullItemName) AS No,*, ( ItemName + ' - ' + DosageForm + ' - ' + Strength) as DrugName FROM vwGetAllItems ORDER BY ItemName"));
            return this.DataTable;
        }

        public DataTable GetAllSupply()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT ROW_NUMBER() OVER (ORDER BY FullItemName) AS No,* FROM vwGetAllItems Where Name = 'Supply' AND IsInHospitalList = 1  ORDER BY ItemName"));

            return this.DataTable;
        }

        public DataTable GetAllSuppliesAll()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems Where Name = 'Supply' ORDER BY ItemName"));

            return this.DataTable;
        }

        public DataTable GetAllItemWithBalance()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemBalance ORDER BY ItemName"));
            return this.DataTable;
        }

        public DataTable GetItemById(int itemId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE ID = {0}", itemId));
            return this.DataTable;
        }

        public DataTable GetItemByKeyword(string itemName)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE ItemName LIKE '{0}%' AND Name = 'Drug'   ORDER BY ItemName", itemName));
            return this.DataTable;
        }

        public DataTable GetSupplyByKeyword(string itemName)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE ItemName LIKE '{0}%' AND Name = 'Supply'  ORDER BY ItemName", itemName));
            return this.DataTable;
        }

        public DataTable GetItemByKeywordInList(string itemName)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND ItemName LIKE '{0}%'  AND Name = 'Drug' ORDER BY ItemName", itemName));
            return this.DataTable;
        }

        public DataTable GetSupplyByKeywordInList(string itemName)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND ItemName LIKE '{0}%'  AND Name = 'Supply' ORDER BY ItemName", itemName));
            return this.DataTable;
        }

        public DataTable GetItemsByProgram(int programId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT ROW_NUMBER() OVER (ORDER BY FullItemName) AS No,* FROM vwGetItemPrograms WHERE ProgramID = {0} ORDER BY ItemName", programId));
            return this.DataTable;
        }

        public DataTable GetSupplyByProgram(int programId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT ROW_NUMBER() OVER (ORDER BY ItemName) AS No,* FROM vwGetSupplyPrograms WHERE ProgramID = {0} ORDER BY ItemName", programId));
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedItemsByProgram(int programId, int storeId)
        {
            this.FlushData();
            if (storeId != 0)
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemPrograms WHERE ProgramID = {0} AND ID IN (SELECT ItemID FROM  dbo.ReceiveDoc Where StoreID = {1}) ORDER BY ItemName", programId, storeId));
            else
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemPrograms WHERE ProgramID = {0} AND ID IN (SELECT ItemID FROM  dbo.ReceiveDoc) ORDER BY ItemName", programId));
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedSuppliesByProgram(int programId, int storeId)
        {
            this.FlushData();
            if (storeId != 0)
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetSupplyPrograms WHERE ProgramID = {0} AND ID IN (SELECT ItemID FROM  dbo.ReceiveDoc Where StoreID = {1}) ORDER BY ItemName", programId, storeId));
            else
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetSupplyPrograms WHERE ProgramID = {0} AND ID IN (SELECT ItemID FROM  dbo.ReceiveDoc) ORDER BY ItemName", programId));
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedSupply(int storeId)
        {
            this.FlushData();
            if (storeId == 0)
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc)) AND (IsInHospitalList = 1) AND Name = 'Supply' ORDER BY ItemName"));
            }
            else
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) AND (IsInHospitalList = 1) AND Name = 'Supply' ORDER BY ItemName", storeId));
            }
            return this.DataTable;
        }

        public DataTable GetItemsBySupplier(int supplierId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemSuppliers WHERE SupplierID = {0}  ORDER BY ItemName", supplierId));
            return this.DataTable;
        }

        public DataTable GetItemsByDU(int duId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("select * from vwGetAllItems where ID in (select ItemID from IssueDoc where ReceivingUnitID = {0}) ORDER BY ItemName", duId));
            return this.DataTable;
        }

        public DataTable GetItemsByProduct(int productId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemsByCategory WHERE ProductID = {0}  ORDER BY ItemName", productId));
            return this.DataTable;
        }

        public DataTable GetItemsBySubCategory(int subCategoryId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemsByCategory WHERE SubCategoryID = {0}  ORDER BY ItemName", subCategoryId));
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedItemsBySubCategory(int subCategoryId, int storeId)
        {
            this.FlushData();
            if (storeId != 0)
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemsByCategory WHERE SubCategoryID = {0} AND ID IN (SELECT ItemID FROM  dbo.ReceiveDoc where StoreID = {1}) ORDER BY ItemName", subCategoryId, storeId));
            else
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemsByCategory WHERE SubCategoryID = {0} AND ID IN (SELECT ItemID FROM  dbo.ReceiveDoc) ORDER BY ItemName", subCategoryId));
            return this.DataTable;
        }

        public DataTable GetSupplyByCategory(int CategoryId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetSupplyByCategory WHERE CategoryID = {0}  ORDER BY ItemName", CategoryId));
            return this.DataTable;
        }

        public DataTable ExcludeSupplyByCategory(int CategoryId, int storeId)
        {
            this.FlushData();
            if (storeId != 0)
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetSupplyByCategory WHERE CategoryID = {0} ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE StoreID = {1}) ORDER BY ItemName", CategoryId, storeId));
            else
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetSupplyByCategory WHERE CategoryID = {0} ID IN (SELECT ItemID FROM  dbo.ReceiveDoc) ORDER BY ItemName", CategoryId));
            return this.DataTable;
        }

        public DataTable GetItemsByCategory(int categoryId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemsByCategory WHERE CategoryId = {0}  ORDER BY ItemName", categoryId));
            return this.DataTable;
        }

        public DataTable ExcluedNeverReceivedItemsByCategory(int categoryId, int storeId)
        {
            this.FlushData();
            if (storeId != 0)
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemsByCategory WHERE CategoryId = {0} AND ID IN (SELECT ItemID FROM  dbo.ReceiveDoc) ORDER BY ItemName", categoryId));
            else
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemsByCategory WHERE CategoryId = {0} AND ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE StoreID = {1}) ORDER BY ItemName", categoryId, storeId));
            return this.DataTable;
        }

        public DataTable GetItemsReceivedByBatch(int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE StoreId = {0} AND Name = 'Drug' ORDER BY ItemName", storeId));
            return this.DataTable;
        }

        public DataTable GetItemsReceivedByBatchForAdj(int storeId, int year)
        {
            this.FlushData();
            // TOFIX: if the the vwGe
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch  WHERE StoreId = {0} AND Name = 'Drug' AND NOT (ExpDate < GETDATE() AND QuantityLeft = 0) and not (Year(Date) != {1} and QuantityLeft = 0) ORDER BY ItemName", storeId, year));
            return this.DataTable;
        }

        public DataTable GetCommoditiesReceivedByBatch(int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE StoreId = {0} AND Name = 'Supply' ORDER BY ItemName", storeId));
            return this.DataTable;
        }

        public DataTable GetAllItemsReceivedByBatchForAdj(int storeId, int year)
        {
            this.FlushData();
            // TOFIX: if the the vwGe
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch  WHERE StoreId = {0} AND NOT (ExpDate < GETDATE() AND QuantityLeft = 0) and not (Year(Date) != {1} and QuantityLeft = 0) ORDER BY ItemName", storeId, year));
            return this.DataTable;
        }

        public DataTable GetItemsReceivedByBatchByKeyword(string keyword, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE StoreId = {1} AND Name='Drug' AND NOT (ExpDate < GETDATE() AND QuantityLeft = 0) AND ItemName LIKE '{0}%' ORDER BY ID", keyword, storeId));
            return this.DataTable;
        }

        public DataTable GetCommoditiesReceivedByBatchByKeyword(string keyword, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE StoreId = {1} AND Name='Supply' AND ItemName LIKE '{0}%' ORDER BY ID", keyword, storeId));
            return this.DataTable;
        }

        public DataTable GetItemsReceivedByBatchByCatID(int categoryId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("select * from vwGetReceivedItemsByBatch where StoreId = {1} AND NOT (ExpDate < GETDATE() AND QuantityLeft = 0) AND ID IN (Select ItemID from ProductsCategory Where SubCategoryID IN (Select ID from SubCategory where CategoryID = {0}))", categoryId, storeId));
            return this.DataTable;
        }

        public DataTable GetItemsReceivedByBatchBySubCatID(int subCategoryId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("select * from vwGetReceivedItemsByBatch where StoreId = {1} AND NOT (ExpDate < GETDATE() AND QuantityLeft = 0) AND  ID IN (Select ItemID from ProductsCategory Where SubCategoryID = {0})", subCategoryId, storeId));
            return this.DataTable;
        }

        public DataTable GetItemsIssuedByBatch(int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetIssuedItemsByBatch Where StoreId = {0} ", storeId));
            return this.DataTable;
        }

        public Int64 GetQuantityIssuedByBatch(string batchNo, int itemId, int storeId, DateTime dt1, DateTime dt2)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetIssuedItemsByBatch WHERE BatchNo = '{0}' AND ID = {1} AND StoreId = {2} AND Date between '{3}' and '{4}'", batchNo, itemId, storeId, dt1.ToString(), dt2.ToString()));
            Int64 qunatity = 0;
            foreach (DataRowView dv in this.DataTable.DefaultView)
            {
                qunatity = qunatity + Convert.ToInt64(dv["Quantity"]);
            }
            return qunatity;
        }

        public Int64 GetQuantityIssuedByItemPerMonth(int month, int itemId, int storeId, int year)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT SUM(Quantity) AS Quantity FROM IssueDoc WHERE (IsApproved = 1) AND (ItemID = {1}) AND (MONTH(Date) = {0} AND StoreId = {2} AND Year(Date) = {3})", month, itemId, storeId, year));
            Int64 qunatity = 0;
            if (this.DataTable.Rows[0]["Quantity"].ToString() != "")
            {
                qunatity = Convert.ToInt64(this.DataTable.Rows[0]["Quantity"]);
            }
            return qunatity;
        }

        public Int64 GetQuantityReceiveByItemPerMonth(int month, int itemId, int storeId, int yr)
        {
            this.FlushData();
            int year = yr;// (month < 11) ? yr : yr - 1;
            this.LoadFromRawSql(String.Format("SELECT SUM(Quantity) AS Quantity FROM ReceiveDoc WHERE (ItemID = {1}) AND (StoreId = {2}) AND (MONTH(Date) = {0} AND Year(Date) = {3})", month, itemId, storeId, year));
            Int64 qunatity = 0;
            if (this.DataTable.Rows[0]["Quantity"].ToString() != "")
            {
                qunatity = Convert.ToInt64(this.DataTable.Rows[0]["Quantity"]);
            }
            return qunatity;
        }

        public double GetCostIssuedByItemPerMonth(int month, int storeId, int yr)
        {
            this.FlushData();
            int year = (month < 11) ? yr : yr - 1;
            this.LoadFromRawSql(String.Format("SELECT SUM(Cost * Quantity) AS Cost FROM IssueDoc WHERE (IsApproved = 1) AND (MONTH(Date) = {0} AND StoreId = {1} AND Year(Date) = {2})", month, storeId, year));
            double cost = 0;
            if (this.DataTable.Rows[0]["Cost"].ToString() != "")
            {
                cost = Convert.ToInt64(this.DataTable.Rows[0]["Cost"]);
            }
            return cost;
        }

        public double GetCostReceiveByItemPerMonth(int month, int storeId, int yr)
        {
            this.FlushData();
            int year = (month < 11) ? yr : yr - 1;
            this.LoadFromRawSql(String.Format("SELECT SUM(Cost * Quantity) AS Cost FROM ReceiveDoc WHERE (StoreId = {1}) AND (MONTH(Date) = {0} AND Year(Date) = {2})", month, storeId, year));
            double cost = 0;
            if (this.DataTable.Rows[0]["Cost"].ToString() != "")
            {
                cost = Convert.ToInt64(this.DataTable.Rows[0]["Cost"]);
            }
            return cost;
        }

        public Int64 GetLostQuantity(string batchNo, int itemId, int storeId, DateTime dt1, DateTime dt2)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetLosses WHERE BatchNo = '{0}' AND ID = {1} AND StoreId = {2} AND Date between '{3}' and '{4}'", batchNo, itemId, storeId, dt1.ToString(), dt2.ToString()));
            Int64 qunatity = 0;
            foreach (DataRowView dv in this.DataTable.DefaultView)
            {
                qunatity = qunatity + Convert.ToInt64(dv["Quantity"]);
            }
            return qunatity;
        }

        public Int64 GetAdjustedQuantity(string batchNo, int itemId, int storeId, DateTime dt1, DateTime dt2)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAdjustments WHERE BatchNo = '{0}' AND ID = {1} AND StoreId = {2} AND Date between '{3}' and '{4}'", batchNo, itemId, storeId, dt1.ToString(), dt2.ToString()));
            Int64 qunatity = 0;
            foreach (DataRowView dv in this.DataTable.DefaultView)
            {
                qunatity = qunatity + Convert.ToInt64(dv["Quantity"]);
            }
            return qunatity;
        }

        public DataTable GetExpiredItemsByBatch(int storeId, int commodityType)
        {
            this.FlushData();
            string query = string.Format("SELECT ib.*, (Cost * QuantityLeft) AS Price FROM vwGetReceivedItemsByBatch ib WHERE ( ib.TypeID = {1}) AND (ib.ExpDate <= GETDATE()) AND (ib.Out = 0) AND ib.StoreId = {0} ORDER BY Price DESC", storeId,commodityType);

            this.LoadFromRawSql(query);
            return this.DataTable;
        }

        public DataTable GetAllExpiredItemsByBatch(int storeId, int year, int reasonId)
        {
            this.FlushData();
            string whereQ = ((reasonId != 0) ? " AND ReasonId = " + reasonId : "");
            string query = string.Format("SELECT *,ROW_NUMBER() OVER (ORDER BY Date DESC) as RowNo,(Cost * Quantity) AS Price, CASE Losses WHEN 1 then cast(0-Quantity as nvarchar) else '+' + cast(Quantity as nvarchar) end as QuantityDetail FROM Disposal JOIN DisposalReasons on Disposal.ReasonId = DisposalReasons.ID JOIN vwGetAllItems on vwGetAllItems.ID = Disposal.ItemID WHERE StoreId = {0} AND year(Date) = {1} " + whereQ + " ORDER BY FullItemName", storeId, year);

            this.LoadFromRawSql(query);
            return this.DataTable;
        }

        public DataTable GetExpiredItemsByBatchByKeyword(int storeId, string keyword)
        {
            this.FlushData();
            if (storeId != 0)
                this.LoadFromRawSql(string.Format("SELECT *,(Cost * QuantityLeft) AS Price FROM vwGetReceivedItemsByBatch WHERE ( Name = 'Drug') AND (ExpDate <= GETDATE()) AND (Out = 0) AND ItemName LIKE '{1}%' AND StoreId = {0} ORDER BY Price DESC", storeId, keyword));
            else
                this.LoadFromRawSql(string.Format("SELECT *,(Cost * QuantityLeft) AS Price FROM vwGetReceivedItemsByBatch WHERE ( Name = 'Drug') AND (ExpDate <= GETDATE()) AND (Out = 0) AND ItemName LIKE '{0}%' ORDER BY Price DESC", keyword));
            return this.DataTable;
        }

        public DataTable GetExpiredSupplyByBatchByKeyword(int storeId, string keyword)
        {
            this.FlushData();
            if (storeId != 0)
                this.LoadFromRawSql(string.Format("SELECT *,(Cost * QuantityLeft) AS Price FROM vwGetReceivedItemsByBatch WHERE ( Name = 'Supply') AND (ExpDate <= GETDATE()) AND (Out = 0) AND ItemName LIKE '{1}%' AND StoreId = {0} ORDER BY Price DESC", storeId, keyword));
            else
                this.LoadFromRawSql(string.Format("SELECT *,(Cost * QuantityLeft) AS Price FROM vwGetReceivedItemsByBatch WHERE ( Name = 'Supply') AND (ExpDate <= GETDATE()) AND (Out = 0) AND ItemName LIKE '{0}%' ORDER BY Price DESC", keyword));
            return this.DataTable;
        }

        public object[] CountExpiredItemsAndAmount(int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("Select Count(*) AS Qty ,Sum(QuantityLeft * Cost) AS Price From ReceiveDoc where QuantityLeft > 0 And ExpDate < GETDATE() AND StoreID = {0}", storeId));
            object[] obj = new object[2];
            obj[0] = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt32(this.DataTable.Rows[0]["Qty"]) : 0);
            obj[1] = ((this.DataTable.Rows.Count > 0) ? ((this.DataTable.Rows[0]["Price"].ToString() != "") ? Convert.ToDouble(this.DataTable.Rows[0]["Price"]) : 0) : 0);
            return obj;
        }

        

        public DataTable GetExpiredItemsByID(int storeId, int itemId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE (ExpDate <= GETDATE()) AND (Out = 0) AND StoreId = {0} AND ID = {1} ORDER BY ID", storeId, itemId));
            return this.DataTable;
        }

        public Int64 GetExpiredQtyItemsByID(int itemId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE (ExpDate <= GETDATE()) AND (Out = 0) AND QuantityLeft > 0 AND StoreId = {0} AND ID = {1} ", storeId, itemId));
            Int64 qunatity = 0;
            foreach (DataRowView dv in this.DataTable.DefaultView)
            {
                qunatity = qunatity + Convert.ToInt64(dv["QuantityLeft"]);
            }
            return qunatity;
        }

        public object[] GetExpiredQtyAmountItemsByID(int itemId, int storeId)
        {
            this.FlushData();
            Int64 quantity = 0;
            double price = 0;
            this.LoadFromRawSql(string.Format("SELECT * ,(Cost * QuantityLeft) AS Price  FROM vwGetReceivedItemsByBatch WHERE (ExpDate <= GETDATE()) AND (Out = 0) AND StoreId = {0} AND ID = {1} ", storeId, itemId));
            foreach (DataRowView dv in this.DataTable.DefaultView)
            {
                quantity = quantity + Convert.ToInt64(dv["QuantityLeft"]);
                price = price + Convert.ToDouble(dv["Price"]);
            }
            object[] obj = { quantity, price };
            return obj;
        }

        public Int64 GetNearlyExpiredQtyItemsByID(int itemId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE StoreId = {0} AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (Out = 0) AND ID = {1}", storeId, itemId));
            Int64 qunatity = 0;
            foreach (DataRowView dv in this.DataTable.DefaultView)
            {
                qunatity = qunatity + Convert.ToInt64(dv["QuantityLeft"]);
            }
            return qunatity;
        }

        public object[] GetNearlyExpiredQtyAmountItemsByID(int itemId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT *,(Cost * QuantityLeft) AS Price FROM vwGetReceivedItemsByBatch WHERE StoreId = {0} AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (Out = 0) AND ID = {1}", storeId, itemId));
            Int64 qunatity = 0;
            double price = 0;
            foreach (DataRowView dv in this.DataTable.DefaultView)
            {
                if (dv["QuantityLeft"] == DBNull.Value)
                {
                    dv["QuantityLeft"] = 0;
                }
                qunatity = qunatity + Convert.ToInt64(dv["QuantityLeft"]);
                if (dv["Price"] == DBNull.Value)
                {
                    dv["Price"] = 0;
                }
                price = price + Convert.ToDouble(dv["Price"]);
            }
            object[] obj = { qunatity, price };
            return obj;
        }

        public object[] CountNearlyExpiredQtyAmount(int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT Count(*) AS Qty,Sum(QuantityLeft * Cost) AS Price FROM vwGetReceivedItemsByBatch WHERE StoreId = {0} AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (QuantityLeft > 0) ", storeId));
            Int64 qunatity = 0;
            double price = 0;
            qunatity = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt64(this.DataTable.Rows[0]["Qty"]) : 0);
            price = ((this.DataTable.Rows.Count > 0) ? ((this.DataTable.Rows[0]["Price"].ToString() != "") ? Convert.ToDouble(this.DataTable.Rows[0]["Price"]) : 0) : 0);

            object[] obj = { qunatity, price };
            return obj;
        }

        public object[] GetSOHQtyAmount(int itemId, int storeId)
        {
            //i think it needs a date for the physical inventory part
            this.FlushData();
            this.LoadFromRawSql(String.Format("select Sum(QuantityLeft)As SOH,Sum(QuantityLeft * Cost)As SOHPrice from ReceiveDoc where ItemID = {0} AND StoreID = {1} Group by ItemId", itemId, storeId));
            Int64 soh = 0;
            double sohPrice = 0;
            if (this.DataTable.Rows.Count > 0)
            {
                soh = Convert.ToInt64(this.DataTable.Rows[0]["SOH"]);
                sohPrice = Convert.ToDouble(this.DataTable.Rows[0]["SOHPrice"]);
            }
            this.FlushData();
            this.LoadFromRawSql(String.Format("select Sum(PhysicalInventory) AS EndSoh, Sum(PhysicalInventoryPrice) AS EndSohPrice from YearEnd where ItemID = {0} AND StoreID = {1} AND Year = {2}", itemId, storeId));
            if (this.DataTable.Rows.Count > 0)
            {
                soh = soh + Convert.ToInt64(this.DataTable.Rows[0]["EndSoh"]);
                sohPrice = sohPrice + Convert.ToDouble(this.DataTable.Rows[0]["EndSohPrice"]);
            }

            object[] obj = { soh, sohPrice };
            return obj;
        }

        public object[] GetAllSOHQtyAmount(int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("select Count( Distinct ItemID) As Qty, Sum(QuantityLeft * Cost)As SOHPrice from ReceiveDoc where StoreID = {0} AND QuantityLeft > 0", storeId));
            Int64 soh = 0;
            double sohPrice = 0;
            if (this.DataTable.Rows.Count > 0)
            {
                soh = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt64(this.DataTable.Rows[0]["Qty"]) : 0);
                sohPrice = ((this.DataTable.Rows.Count > 0) ? Convert.ToDouble(this.DataTable.Rows[0]["SOHPrice"]) : 0);
            }
            object[] obj = { soh, sohPrice };
            return obj;
        }

        public DataTable GetExpiredItemsByBatchByCat(int categoryId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE Name = 'Drug' AND (ExpDate <= GETDATE()) AND (Out = 0) AND StoreId = {0} AND ID IN (Select ItemID from ProductsCategory Where SubCategoryID IN (Select ID from SubCategory where CategoryID = {1})) ORDER BY ID", storeId, categoryId));
            return this.DataTable;
        }

        public DataTable GetExpiredSupplyByBatchByCat(int categoryId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE Name = 'Supply' AND (ExpDate <= GETDATE()) AND (Out = 0) AND StoreId = {0} AND ID IN (Select ItemID from ProductsCategory Where SubCategoryID IN (Select ID from SubCategory where CategoryID = {1})) ORDER BY ID", storeId, categoryId));
            return this.DataTable;
        }

        public DataTable GetExpiredItemsByBatchBySubcat(int subCatId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE (ExpDate <= GETDATE()) AND (Out = 0) AND StoreId = {0} AND ID IN (Select ItemID from ProductsCategory Where SubCategoryID = {1}) ORDER BY ID", storeId, subCatId));
            return this.DataTable;
        }

        public DataTable GetNearlyExpiredItemsByBatch(int storeId, int commodityType , DateTime dtCurrent)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT isnull(Cost,0) Cost, isnull(QuantityLeft,0) QuantityLeft, ib.*,  (isnull(Cost,0) * QuantityLeft) As Price FROM vwGetReceivedItemsByBatch ib WHERE ib.TypeID = {1} AND ib.StoreId = {0} AND (ib.ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (ib.Out = 0) ORDER BY Price Desc", storeId, commodityType));
            this.DataTable.Columns.Add("MOS");
            for (int i = 0; i < this.DataTable.Rows.Count; i++)
            {
                this.DataTable.Rows[i]["MOS"] = this.GetMOS(Convert.ToInt32(this.DataTable.Rows[i]["ID"]), storeId, Convert.ToInt32(this.DataTable.Rows[i]["QuantityLeft"]), dtCurrent);
            }
            return this.DataTable;
        }

        public decimal GetMOS(int itemId, int storeId, int qty, DateTime dtCurrent)
        {
            GeneralInfo pipline = new GeneralInfo();
            pipline.LoadAll();
            int min = pipline.Min;
            int max = pipline.Max;
            double eop = pipline.EOP;
            Items itmB = new Items();
            Balance bal = new Balance();
            Int64 AMC = bal.CalculateAMC(itemId, storeId, dtCurrent.Month, dtCurrent.Year);//dtBal.Rows.Count <= 0) ? 0 : ((dtBal.Rows[0]["AMC"].ToString() != "") ? Convert.ToInt64(dtBal.Rows[0]["AMC"]) : 0);
            Int64 MinCon = AMC * min;
            Int64 maxCon = AMC * max;
            double eopCon = AMC * (eop + 0.25);

            //Int64 SOH = bal.GetSOH(itemId, storeId, dtCurrent.Month, dtCurrent.Year);

            decimal MOS = (AMC != 0) ? (qty / Convert.ToDecimal(AMC)) : 0;
            MOS = Decimal.Round(MOS, 1);
            return MOS;
        }

        public decimal GetMOS(int itemId, int storeId, DateTime dtCurrent)
        {
            GeneralInfo pipline = new GeneralInfo();
            pipline.LoadAll();
            int min = pipline.Min;
            int max = pipline.Max;
            double eop = pipline.EOP;
            Items itmB = new Items();
            Balance bal = new Balance();
            Int64 AMC = bal.CalculateAMC(itemId, storeId, dtCurrent.Month, dtCurrent.Year);//dtBal.Rows.Count <= 0) ? 0 : ((dtBal.Rows[0]["AMC"].ToString() != "") ? Convert.ToInt64(dtBal.Rows[0]["AMC"]) : 0);
            Int64 MinCon = AMC * min;
            Int64 maxCon = AMC * max;
            double eopCon = AMC * (eop + 0.25);

            Int64 SOH = bal.GetSOH(itemId, storeId, dtCurrent.Month, dtCurrent.Year);

            decimal MOS = (AMC != 0) ? (SOH / Convert.ToDecimal(AMC)) : 0;
            MOS = Decimal.Round(MOS, 1);
            return MOS;
        }

        public DataTable GetNearlyExpiredItemsByBatchByKeyword(int storeId, string keyword)
        {
            this.FlushData();
            if (storeId != 0)
                this.LoadFromRawSql(string.Format("SELECT *,(Cost * QuantityLeft) As Price FROM vwGetReceivedItemsByBatch WHERE TypeID = {2} AND ItemName LIKE '{1}%' AND StoreId = {0} AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (Out = 0) ORDER BY Price Desc", storeId, keyword,Type.Constants.Pharmacuticals));
            else
                this.LoadFromRawSql(string.Format("SELECT *,(Cost * QuantityLeft) As Price FROM vwGetReceivedItemsByBatch WHERE TypeID = {1} AND ItemName LIKE '{0}%' AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (Out = 0) ORDER BY Price Desc", keyword, Type.Constants.Pharmacuticals));
            return this.DataTable;
        }

    

       


        public DataTable GetNearlyExpiredItemsByBatchByCatId(int storeId,int commodityType, int categoryId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE StoreId = {0} AND TypeID = {2} AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (Out = 0)AND ID IN (Select ItemID from ProductsCategory Where SubCategoryID IN (Select ID from SubCategory where CategoryID = {1})) ORDER BY ID", storeId, categoryId,commodityType));
            return this.DataTable;
        }

        public DataTable GetNearlyExpiredItemsByBatchBySubcatId(int storeId, int subCategoryId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE StoreId = {0} AND Name = 'Drug' AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (Out = 0)AND ID IN (Select ItemID from ProductsCategory Where SubCategoryID ={1}) ORDER BY ID", storeId, subCategoryId));
            return this.DataTable;
        }

        public DataTable GetNearlyExpiredSupplyByBatchByCatId(int storeId, int CategoryId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE StoreId = {0} AND Name = 'Supply' AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (Out = 0)AND ID IN (Select ItemID from ItemSupplyCategory Where CategoryID ={1}) ORDER BY ID", storeId, CategoryId));
            return this.DataTable;
        }

        public DateTime GetLastIssuedDate(int itemId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT TOP (1) Date FROM IssueDoc WHERE (StoreId = {1}) AND (ItemID = {0})ORDER BY Date DESC", itemId, storeId));
            DateTime dt = (this.DataTable.Rows.Count > 0) ? Convert.ToDateTime(this.DataTable.Rows[0]["Date"]) : new DateTime();

            return dt;
        }

        public DateTime GetLastReceiveDate(int itemId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT TOP (1) Date FROM ReceiveDoc WHERE (StoreID = {1}) AND (ItemID = {0})ORDER BY Date DESC", itemId, storeId));
            DateTime dt = (this.DataTable.Rows.Count > 0) ? Convert.ToDateTime(this.DataTable.Rows[0]["Date"]) : new DateTime();

            return dt;
        }

        public int CountVitalItems()
        {
            this.FlushData();
            this.LoadFromRawSql("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND VEN = 'V' AND Name = 'Drug'");
            return this.DataTable.Rows.Count;
        }

        public DataTable ExcludeNeverReceivedItems(int storeId, int commodityTypeID)
        {
            this.FlushData();
            if (storeId == 0)
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc)) AND (IsInHospitalList = 1) AND TypeID = {0} ORDER BY ItemName",commodityTypeID));
            }
            else
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) AND (IsInHospitalList = 1) AND TypeID = {1} ORDER BY ItemName", storeId,commodityTypeID));
            }
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedItemsNoCategory(int storeId)
        {
            this.FlushData();
            if (storeId == 0)
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc)) AND (IsInHospitalList = 1)  ORDER BY ItemName"));
            }
            else
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) AND (IsInHospitalList = 1)  ORDER BY ItemName", storeId));
            }
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedItemsByKeyword(int storeId, string itemName)
        {
            this.FlushData();
            if (storeId == 0)
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE ItemName LIKE '{0}%' AND (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc)) AND (IsInHospitalList = 1) AND Name = 'Drug' ORDER BY ItemName", itemName));
            }
            else
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE ItemName LIKE '{1}%' AND(ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) AND (IsInHospitalList = 1) AND Name = 'Drug' ORDER BY ItemName", storeId, itemName));
            }
            return this.DataTable;
        }

        public DataTable GetReceivedNotIssuedItems(int storeId, int commodityTypeID)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) AND (IsInHospitalList = 1) AND (ID IN (SELECT ItemID FROM  dbo.IssueDoc WHERE (StoreID = {0}))) and TypeID = {1} ORDER BY ItemName", storeId,commodityTypeID));
            return this.DataTable;
        }

        public DataTable GetReceivedNotIssuedItemsByKeyword(int storeId, string itemName)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE ItemName LIKE '{1}%' AND (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) AND (IsInHospitalList = 1) AND (ID IN (SELECT ItemID FROM  dbo.IssueDoc WHERE (StoreID = {0}))) ORDER BY ItemName", storeId, itemName));
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedItemsNeverIssued(int storeId)
        {
            this.FlushData();
            if (storeId == 0)
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc)) AND (IsInHospitalList = 1) AND Name = 'Drug' ORDER BY ItemName"));
            }
            else
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) AND (IsInHospitalList = 1) AND Name = 'Drug' ORDER BY ItemName", storeId));
            }
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedSupplyByKeyword(int storeId, string itemName)
        {
            this.FlushData();
            if (storeId == 0)
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE ItemName like '0%' AND (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc)) AND (IsInHospitalList = 1) AND Name = 'Supply' ORDER BY ItemName", itemName));
            }
            else
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE ItemName like '1%' AND(ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) AND (IsInHospitalList = 1) AND Name = 'Supply' ORDER BY ItemName", storeId, itemName));
            }
            return this.DataTable;
        }

        public bool HasTransactions(int itemId)
        {
            bool tran = false;
            this.FlushData();
            this.LoadFromRawSql(String.Format("select ID,ItemID from IssueDoc where ItemID = {0} union select ID,ItemID from ReceiveDoc where ItemID = {0}", itemId));
            if (this.DataTable.Rows.Count > 0)
                tran = true;
            return tran;
        }


        private void LoadItemsByStorageType(string storageType)
        {
            this.LoadFromRawSql(String.Format("SELECT *, ( ItemName + ' - ' + DosageForm + ' - ' + Strength) as DrugName FROM vwGetAllItems Where Name = 'Drug' and StorageTypeID = {0} ORDER BY ItemName", storageType));
        }

        public static DataTable GetItems(string storageType)
        {
            Items itms = new Items();
            itms.LoadItemsByStorageType(storageType);
            return itms.DataTable;
        }

        //public DataTable GetStockedOutItems(int storeId, DateTime dtCurrent)
        //{
        //    DataTable dtResult = new DataTable();
        //    DataTable dtItem = this.GetAllItems(1, storeId);
        //    GeneralInfo pipline = new GeneralInfo();
        //    pipline.LoadAll();
        //    int min = pipline.Min;
        //    int max = pipline.Max;
        //    int month = dtCurrent.Month;
        //    int year = dtCurrent.Year;
        //    Balance bal = new Balance();
        //    IssueDoc iss = new IssueDoc();
        //    string[] col = { "ID", "FullItemName", "MaxCon", "MinCon", "AMC", "noDays", "CategoryId", "SubCategoryID", "BeenReceived" };

        //    dtResult.Columns.Add("ID");
        //    dtResult.Columns.Add("FullItemName");
        //    dtResult.Columns.Add("MaxCon", typeof(int));
        //    dtResult.Columns.Add("MinCon", typeof(int));
        //    dtResult.Columns.Add("AMC", typeof(int));
        //    dtResult.Columns.Add("noDays");
        //    dtResult.Columns.Add("CategoryId", typeof(int));
        //    dtResult.Columns.Add("SubCategoryId", typeof(int));
        //    dtResult.Columns.Add("BeenReceived");

        //    foreach (DataRow dr in dtItem.Rows)
        //    {
        //        string itemName = dr["FullItemName"].ToString();
        //        int yer = (month < 11) ? year : year - 1;
        //        Int64 AMC = bal.CalculateAMC(Convert.ToInt32(dr["ID"]), storeId, month, year);
        //        Int64 MinCon = AMC * min;
        //        Int64 maxCon = AMC * max;

        //        Int64 SOH = bal.GetSOH(Convert.ToInt32(dr["ID"]), storeId, month, year); ;
        //        Int64 maxMOS = SOH - maxCon;
        //        if (SOH == 0)
        //        {
        //            DateTime DayStockOut = iss.GetLastIssuedDateByItem(storeId, Convert.ToInt32(dr["ID"]));
        //            TimeSpan tt = new TimeSpan();
        //            string noDays = "";
        //            tt = new TimeSpan(dtCurrent.Ticks - DayStockOut.Ticks);
        //            noDays = ((tt.TotalDays <= 90) ? tt.TotalDays.ToString() : ((tt.TotalDays < 30000) ? "More than 3 Month" : "Never Received"));//(tt.TotalDays < 30000) ? : ((ckExclude.Checked) ? "Loss/Expired" : "Never Received");
        //            object[] obj = { dr["ID"], itemName, maxCon, MinCon, AMC, noDays, dr["CategoryId"], dr["SubCategoryID"], dr["BeenReceived"] };
        //            dtResult.Rows.Add(obj);
        //        }
        //    }
        //    return dtResult;
        //}

        /// <summary>
        /// 
        /// </summary>
        /// <param name="storeId"></param>
        /// <param name="fromYear">In Ethiopian Calendar</param>
        /// <param name="fromMonth">In Ethiopian Calendar</param>
        /// <param name="toYear">In Ethiopian Calendar</param>
        /// <param name="toMonth">In Ethiopian Calendar</param>
        /// <returns></returns>
        public DataTable GetRRFReport(int storeId, int fromYear, int fromMonth, int toYear, int toMonth)
        {
            Balance balance = new Balance();
            if (fromMonth != 1)
                fromMonth--;
            else
            {
                fromYear--;
                fromMonth = 12;//Because SOH returns stock until the end of the month
            }
            DataTable dtbl = balance.GetSOH(storeId, fromMonth, fromYear);
            DataTable dtbl2 = balance.GetSOH(storeId, toMonth, toYear);

            //CALENDAR:Needs to be fixed.
            DateTime dt1 = new DateTime(fromYear, fromMonth, DateTime.DaysInMonth(fromYear, fromMonth));
            DateTime dt2 = new DateTime(toYear, toMonth, DateTime.DaysInMonth(toYear, toMonth));

            string query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity from Items left join (select ItemID, sum(Quantity) as Quantity from ReceiveDoc rd where [Date] between '{0}' and '{1}' and StoreID = {2} group by ItemID) as A on Items.ID = A.ItemID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            DataTable received = this.DataTable;

            query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity from Items left join (select ItemID, sum(Quantity) Quantity from IssueDoc rd where [Date] between '{0}' and '{1}' and StoreID = {2} group by ItemID) as A on Items.ID = A.ItemID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            DataTable issued = this.DataTable;

            query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity from Items left join (select ItemID, sum(case when Losses = 1 then - Quantity else Quantity end) Quantity from Disposal where [Date] between '{0}' and '{1}' and StoreID = {2} group by ItemID) as A on Items.ID = A.ItemID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            DataTable lost = this.DataTable;

            query = string.Format("select distinct Items.ID, case Items.Cost when 0 then 1 else isnull(Items.Cost,1) end as QtyPerPack from Items");
            this.LoadFromRawSql(query);
            System.Data.DataTable preferredPackSizetbl = this.DataTable;

            BLL.Items itm = new Items();
            System.Data.DataTable daysOutOfStock = this.GetItemsWithLastIssuedOrDisposedDate();

            //query=string.Format("select ")

            var x = (from y in dtbl.AsEnumerable()
                     join z in dtbl2.AsEnumerable()
                     on y["ID"] equals z["ID"]
                     join p in preferredPackSizetbl.AsEnumerable()
                     on y["ID"] equals p["ID"]
                     where Convert.ToInt32(y["EverReceived"]) == 1
                     select new { ID = y["ID"], FullItemName = y["FullItemName"], Unit = y["Unit"], StockCode = y["StockCode"], BeginingBalance = Convert.ToInt32(y["SOH"]), SOH = Convert.ToInt32(z["SOH"]), Max = Convert.ToInt32(z["Max"]), QtyPerPack = Convert.ToInt32(p["QtyPerPack"]) }).ToArray();

            var m = (from n in x
                     join z in received.AsEnumerable()
                     on n.ID equals z["ID"]
                     select new { ID = n.ID, FullItemName = n.FullItemName, Unit = n.Unit, StockCode = n.StockCode, BeginingBalance = n.BeginingBalance, SOH = n.SOH, Max = n.Max, QtyPerPack = n.QtyPerPack, Received = z["Quantity"] }).ToArray();

            var l = (from n in m
                     join z in issued.AsEnumerable()
                         on n.ID equals z["ID"]
                     select
                         new
                             {
                                 ID = n.ID,
                                 FullItemName = n.FullItemName,
                                 Unit = n.Unit,
                                 StockCode = n.StockCode,
                                 BeginingBalance = n.BeginingBalance,
                                 SOH = n.SOH,
                                 Max = Convert.ToInt32(z["Quantity"]) * 2,
                                 QtyPerPack = n.QtyPerPack,
                                 Received = n.Received,
                                 Issued = Convert.ToInt32(z["Quantity"])
                             }).ToArray();

            var t = (from n in l
                     join z in lost.AsEnumerable()
                     on n.ID equals z["ID"]
                     select new { ID = n.ID, FullItemName = n.FullItemName, Unit = n.Unit, StockCode = n.StockCode, BeginingBalance = n.BeginingBalance, SOH = n.SOH, Max = n.Max, QtyPerPack = n.QtyPerPack, Received = n.Received, Issued = n.Issued, LossAdj = z["Quantity"], Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH }).ToArray();

            var t1 = (from n in t
                      join z in daysOutOfStock.AsEnumerable()
                          on n.ID equals z["ID"]
                      select
                          new
                              {
                                  ID = n.ID,
                                  FullItemName = n.FullItemName,
                                  Unit = n.Unit,
                                  StockCode = n.StockCode,
                                  BeginingBalance = n.BeginingBalance,
                                  SOH = n.SOH,
                                  Max = n.Max,
                                  QtyPerPack = n.QtyPerPack,
                                  Received = n.Received,
                                  Issued = n.Issued,
                                  LossAdj = n.LossAdj,
                                  Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
                                  DaysOutOfStock = z["DaysOutOfStock"] == DBNull.Value ? 0 : (Convert.ToInt32(z["DaysOutOfStock"]) < 60 ? z["DaysOutOfStock"] : 0)
                              }).ToArray();

            var t2 = (from n in t1
                      select
                          new
                              {
                                  ID = n.ID,
                                  FullItemName = n.FullItemName,
                                  Unit = n.Unit,
                                  StockCode = n.StockCode,
                                  BeginingBalance = n.BeginingBalance,
                                  SOH = n.SOH,
                                  Max = n.Max,
                                  QtyPerPack = n.QtyPerPack,
                                  Received = n.Received,
                                  Issued = n.Issued,
                                  LossAdj = n.LossAdj,
                                  Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
                                  DaysOutOfStock = Convert.ToInt32(n.DaysOutOfStock) == 60 ? 59 : Convert.ToInt32(n.DaysOutOfStock), //TODO: This is a quick fix.  We need to take stock status from the last three months.
                                  MaxStockQty = ((120 * n.Issued) / (60 - Convert.ToInt32(n.DaysOutOfStock)))
                              }).Distinct().ToArray();


            //return t;
            // Converting shit into antoher shit.
            // Just because i was not able to read the elemntes of the anonymus type in another method
            DataTable value = new DataTable();
            value.Columns.Add("ID", typeof(int));
            value.Columns.Add("FullItemName");
            value.Columns.Add("Unit");
            value.Columns.Add("StockCode");
            value.Columns.Add("BeginingBalance", typeof(int));
            value.Columns.Add("SOH", typeof(int));
            value.Columns.Add("Max", typeof(int));
            value.Columns.Add("QtyPerPack", typeof(int));
            value.Columns.Add("Issued", typeof(int));
            value.Columns.Add("Received", typeof(int));
            value.Columns.Add("LossAdj", typeof(int));
            value.Columns.Add("Quantity", typeof(int));
            value.Columns.Add("DaysOutOfStock", typeof(int));
            value.Columns.Add("MaxStockQty", typeof(int));
            foreach (var v in t2)
            {
                DataRowView drv = value.DefaultView.AddNew();
                drv["ID"] = v.ID;
                drv["FullItemName"] = v.FullItemName;
                drv["Unit"] = v.Unit;
                drv["StockCode"] = v.StockCode;
                drv["BeginingBalance"] = v.BeginingBalance;
                drv["SOH"] = v.SOH;
                drv["Max"] = v.Max;
                drv["QtyPerPack"] = v.QtyPerPack;
                drv["Issued"] = v.Issued;
                drv["Received"] = v.Received;
                drv["LossAdj"] = v.LossAdj;
                drv["Quantity"] = v.Quantity;
                drv["DaysOutOfStock"] = v.DaysOutOfStock;
                drv["MaxStockQty"] = v.MaxStockQty;
            }

            return value;

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="storeId"></param>
        /// <param name="fromYear">In Ethiopian Calendar</param>
        /// <param name="fromMonth">In Ethiopian Calendar</param>
        /// <param name="toYear">In Ethiopian Calendar</param>
        /// <param name="toMonth">In Ethiopian Calendar</param>
        /// <returns></returns>
        public DataTable GetRRFReportInPacks(int storeId, int fromYear, int fromMonth, int toYear, int toMonth)
        {
            Balance balance = new Balance();

            DataTable dtbl = balance.GetSOH(storeId, fromMonth, fromYear);
            DataTable dtbl2 = balance.GetSOH(storeId, toMonth, toYear);

            //CALENDAR:Needs to be fixed.
            DateTime dt1 = new DateTime(fromYear, fromMonth, DateTime.DaysInMonth(fromYear, fromMonth));
            DateTime dt2 = new DateTime(toYear, toMonth, DateTime.DaysInMonth(toYear, toMonth));

            string query = string.Format("select Items.ID, isnull(Quantity,0) as Quantity from Items left join (select ItemID, sum(Quantity) as Quantity from ReceiveDoc rd where [Date] between '{0}' and '{1}' and StoreID = {2} group by ItemID) as A on Items.ID = A.ItemID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            DataTable received = this.DataTable;

            query = string.Format("select Items.ID, isnull(Quantity,0) as Quantity from Items left join (select ItemID, sum(Quantity) Quantity from IssueDoc rd where [Date] between '{0}' and '{1}' and StoreID = {2} group by ItemID) as A on Items.ID = A.ItemID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            DataTable issued = this.DataTable;

            query = string.Format("select Items.ID, isnull(Quantity,0) as Quantity from Items left join (select ItemID, sum(case when Losses = 1 then - Quantity else Quantity end) Quantity from Disposal where [Date] between '{0}' and '{1}' and StoreID = {2} group by ItemID) as A on Items.ID = A.ItemID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            DataTable lost = this.DataTable;

            query = string.Format("select Items.ID, case Items.Cost when 0 then 1 else isnull(Items.Cost,1) end as QtyPerPack from Items");
            this.LoadFromRawSql(query);
            System.Data.DataTable preferredPackSizetbl = this.DataTable;

            BLL.Items itm = new Items();
            System.Data.DataTable daysOutOfStock = this.GetItemsWithLastIssuedOrDisposedDate();

            //query=string.Format("select ")

            var x = (from y in dtbl.AsEnumerable()
                     join z in dtbl2.AsEnumerable()
                     on y["ID"] equals z["ID"]
                     join p in preferredPackSizetbl.AsEnumerable()
                     on y["ID"] equals p["ID"]
                     where Convert.ToInt32(y["EverReceived"]) == 1
                     select new { ID = y["ID"], FullItemName = y["FullItemName"], Unit = y["Unit"], StockCode = y["StockCode"], BeginingBalance = Convert.ToInt32(y["SOH"]), SOH = Convert.ToInt32(z["SOH"]), Max = Convert.ToInt32(z["Max"]), QtyPerPack = Convert.ToInt32(p["QtyPerPack"]) }).ToArray();

            var m = (from n in x
                     join z in received.AsEnumerable()
                     on n.ID equals z["ID"]
                     select new { ID = n.ID, FullItemName = n.FullItemName, Unit = n.Unit, StockCode = n.StockCode, BeginingBalance = n.BeginingBalance, SOH = n.SOH, Max = n.Max, QtyPerPack = n.QtyPerPack, Received = z["Quantity"] }).ToArray();

            var l = (from n in m
                     join z in issued.AsEnumerable()
                         on n.ID equals z["ID"]
                     select
                         new
                         {
                             ID = n.ID,
                             FullItemName = n.FullItemName,
                             Unit = n.Unit,
                             StockCode = n.StockCode,
                             BeginingBalance = n.BeginingBalance,
                             SOH = n.SOH,
                             Max = Convert.ToInt32(z["Quantity"]) * 2,
                             QtyPerPack = n.QtyPerPack,
                             Received = n.Received,
                             Issued = Convert.ToInt32(z["Quantity"])
                         }).ToArray();

            var t = (from n in l
                     join z in lost.AsEnumerable()
                     on n.ID equals z["ID"]
                     select new { ID = n.ID, FullItemName = n.FullItemName, Unit = n.Unit, StockCode = n.StockCode, BeginingBalance = n.BeginingBalance, SOH = n.SOH, Max = n.Max, QtyPerPack = n.QtyPerPack, Received = n.Received, Issued = n.Issued, LossAdj = z["Quantity"], Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH }).ToArray();

            var t1 = (from n in t
                      join z in daysOutOfStock.AsEnumerable()
                          on n.ID equals z["ID"]
                      select
                          new
                          {
                              ID = n.ID,
                              FullItemName = n.FullItemName,
                              Unit = n.Unit,
                              StockCode = n.StockCode,
                              BeginingBalance = n.BeginingBalance,
                              SOH = n.SOH,
                              Max = n.Max,
                              QtyPerPack = n.QtyPerPack,
                              Received = n.Received,
                              Issued = n.Issued,
                              LossAdj = n.LossAdj,
                              Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
                              DaysOutOfStock = z["DaysOutOfStock"] == DBNull.Value ? 0 : (Convert.ToInt32(z["DaysOutOfStock"]) < 60 ? z["DaysOutOfStock"] : 0)
                          }).ToArray();

            var t2 = (from n in t1
                      select
                          new
                          {
                              ID = n.ID,
                              FullItemName = n.FullItemName,
                              Unit = n.Unit,
                              StockCode = n.StockCode,
                              BeginingBalance = n.BeginingBalance / n.QtyPerPack,
                              SOH = n.SOH / n.QtyPerPack,
                              Max = n.Max / n.QtyPerPack,
                              QtyPerPack = n.QtyPerPack,
                              Received = Convert.ToInt32(n.Received) / n.QtyPerPack,
                              Issued = Convert.ToInt32(n.Issued) / n.QtyPerPack,
                              LossAdj = Convert.ToInt32(n.LossAdj) / n.QtyPerPack,
                              Quantity = (n.Max - n.SOH < 0) ? 0 : (n.Max - n.SOH) / n.QtyPerPack,
                              DaysOutOfStock = Convert.ToInt32(n.DaysOutOfStock) == 60 ? 59 : Convert.ToInt32(n.DaysOutOfStock), //TODO: This is a quick fix.  We need to take stock status from the last three months.
                              MaxStockQty = ((120 * n.Issued) / (60 - Convert.ToInt32(n.DaysOutOfStock)) / n.QtyPerPack)
                          }).ToArray();


            //return t;
            // Converting shit into antoher shit.
            // Just because i was not able to read the elemntes of the anonymus type in another method
            DataTable value = new DataTable();
            value.Columns.Add("ID", typeof(int));
            value.Columns.Add("FullItemName");
            value.Columns.Add("Unit");
            value.Columns.Add("StockCode");
            value.Columns.Add("BeginingBalance", typeof(int));
            value.Columns.Add("SOH", typeof(int));
            value.Columns.Add("Max", typeof(int));
            value.Columns.Add("QtyPerPack", typeof(int));
            value.Columns.Add("Issued", typeof(int));
            value.Columns.Add("Received", typeof(int));
            value.Columns.Add("LossAdj", typeof(int));
            value.Columns.Add("Quantity", typeof(int));
            value.Columns.Add("DaysOutOfStock", typeof(int));
            value.Columns.Add("MaxStockQty", typeof(int));
            foreach (var v in t2)
            {
                DataRowView drv = value.DefaultView.AddNew();
                drv["ID"] = v.ID;
                drv["FullItemName"] = v.FullItemName;
                drv["Unit"] = v.Unit;
                drv["StockCode"] = v.StockCode;
                drv["BeginingBalance"] = v.BeginingBalance;
                drv["SOH"] = v.SOH;
                drv["Max"] = v.Max;
                drv["QtyPerPack"] = v.QtyPerPack;
                drv["Issued"] = v.Issued;
                drv["Received"] = v.Received;
                drv["LossAdj"] = v.LossAdj;
                drv["Quantity"] = v.Quantity;
                drv["DaysOutOfStock"] = v.DaysOutOfStock;
                drv["MaxStockQty"] = v.MaxStockQty;
            }

            return value;
        }

        public DataTable GetRRFReportByProgram(int storeId, int fromYear, int fromMonth, int toYear, int toMonth)
        {
            Balance balance = new Balance();
            fromMonth--;//Because SOH returns stock until the end of the month.
            DataTable dtbl = balance.GetSOH(storeId, fromMonth, fromYear);
            DataTable dtbl2 = balance.GetSOH(storeId, toMonth, toYear);

            //CALENDAR:Needs to be fixed.
            DateTime dt1 = new DateTime(fromYear, fromMonth, DateTime.DaysInMonth(fromYear, fromMonth));
            DateTime dt2 = new DateTime(toYear, toMonth, DateTime.DaysInMonth(toYear, toMonth));

            string query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity from Items left join (select ItemID, sum(Quantity) as Quantity from ReceiveDoc rd where [Date] between '{0}' and '{1}' and StoreID = {2} group by ItemID) as A on Items.ID = A.ItemID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            DataTable received = this.DataTable;

            query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity from Items left join (select ItemID, sum(Quantity) Quantity from IssueDoc rd where [Date] between '{0}' and '{1}' and StoreID = {2} group by ItemID) as A on Items.ID = A.ItemID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            DataTable issued = this.DataTable;

            query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity from Items left join (select ItemID, sum(case when Losses = 1 then - Quantity else Quantity end) Quantity from Disposal where [Date] between '{0}' and '{1}' and StoreID = {2} group by ItemID) as A on Items.ID = A.ItemID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            DataTable lost = this.DataTable;

            query = string.Format("select distinct Items.ID, case Items.Cost when 0 then 1 else isnull(Items.Cost,1) end as QtyPerPack from Items");
            this.LoadFromRawSql(query);
            System.Data.DataTable preferredPackSizetbl = this.DataTable;

            BLL.Items itm = new Items();
            System.Data.DataTable daysOutOfStock = this.GetItemsWithLastIssuedOrDisposedDate();

            //query=string.Format("select ")

            var x = (from y in dtbl.AsEnumerable()
                     join z in dtbl2.AsEnumerable()
                     on y["ID"] equals z["ID"]
                     join p in preferredPackSizetbl.AsEnumerable()
                     on y["ID"] equals p["ID"]
                     where Convert.ToInt32(y["EverReceived"]) == 1
                     select new { ID = y["ID"], FullItemName = y["FullItemName"], Unit = y["Unit"], StockCode = y["StockCode"], BeginingBalance = Convert.ToInt32(y["SOH"]), SOH = Convert.ToInt32(z["SOH"]), Max = Convert.ToInt32(z["Max"]), QtyPerPack = Convert.ToInt32(p["QtyPerPack"]) }).ToArray();

            var m = (from n in x
                     join z in received.AsEnumerable()
                     on n.ID equals z["ID"]
                     select new { ID = n.ID, FullItemName = n.FullItemName, Unit = n.Unit, StockCode = n.StockCode, BeginingBalance = n.BeginingBalance, SOH = n.SOH, Max = n.Max, QtyPerPack = n.QtyPerPack, Received = z["Quantity"] }).ToArray();

            var l = (from n in m
                     join z in issued.AsEnumerable()
                         on n.ID equals z["ID"]
                     select
                         new
                         {
                             ID = n.ID,
                             FullItemName = n.FullItemName,
                             Unit = n.Unit,
                             StockCode = n.StockCode,
                             BeginingBalance = n.BeginingBalance,
                             SOH = n.SOH,
                             Max = Convert.ToInt32(z["Quantity"]) * 2,
                             QtyPerPack = n.QtyPerPack,
                             Received = n.Received,
                             Issued = Convert.ToInt32(z["Quantity"])
                         }).ToArray();

            var t = (from n in l
                     join z in lost.AsEnumerable()
                     on n.ID equals z["ID"]
                     select new { ID = n.ID, FullItemName = n.FullItemName, Unit = n.Unit, StockCode = n.StockCode, BeginingBalance = n.BeginingBalance, SOH = n.SOH, Max = n.Max, QtyPerPack = n.QtyPerPack, Received = n.Received, Issued = n.Issued, LossAdj = z["Quantity"], Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH }).ToArray();

            var t1 = (from n in t
                      join z in daysOutOfStock.AsEnumerable()
                          on n.ID equals z["ID"]
                      select
                          new
                          {
                              ID = n.ID,
                              FullItemName = n.FullItemName,
                              Unit = n.Unit,
                              StockCode = n.StockCode,
                              BeginingBalance = n.BeginingBalance,
                              SOH = n.SOH,
                              Max = n.Max,
                              QtyPerPack = n.QtyPerPack,
                              Received = n.Received,
                              Issued = n.Issued,
                              LossAdj = n.LossAdj,
                              Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
                              DaysOutOfStock = z["DaysOutOfStock"] == DBNull.Value ? 0 : (Convert.ToInt32(z["DaysOutOfStock"]) < 60 ? z["DaysOutOfStock"] : 0)
                          }).ToArray();

            var t2 = (from n in t1
                      select
                          new
                          {
                              ID = n.ID,
                              FullItemName = n.FullItemName,
                              Unit = n.Unit,
                              StockCode = n.StockCode,
                              BeginingBalance = n.BeginingBalance,
                              SOH = n.SOH,
                              Max = n.Max,
                              QtyPerPack = n.QtyPerPack,
                              Received = n.Received,
                              Issued = n.Issued,
                              LossAdj = n.LossAdj,
                              Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
                              DaysOutOfStock = Convert.ToInt32(n.DaysOutOfStock) == 60 ? 59 : Convert.ToInt32(n.DaysOutOfStock), //TODO: This is a quick fix.  We need to take stock status from the last three months.
                              MaxStockQty = ((120 * n.Issued) / (60 - Convert.ToInt32(n.DaysOutOfStock)))
                          }).Distinct().ToArray();


            //return t;
            // Converting shit into antoher shit.
            // Just because i was not able to read the elemntes of the anonymus type in another method
            DataTable value = new DataTable();
            value.Columns.Add("ID", typeof(int));
            value.Columns.Add("FullItemName");
            value.Columns.Add("Unit");
            value.Columns.Add("StockCode");
            value.Columns.Add("BeginingBalance", typeof(int));
            value.Columns.Add("SOH", typeof(int));
            value.Columns.Add("Max", typeof(int));
            value.Columns.Add("QtyPerPack", typeof(int));
            value.Columns.Add("Issued", typeof(int));
            value.Columns.Add("Received", typeof(int));
            value.Columns.Add("LossAdj", typeof(int));
            value.Columns.Add("Quantity", typeof(int));
            value.Columns.Add("DaysOutOfStock", typeof(int));
            value.Columns.Add("MaxStockQty", typeof(int));
            foreach (var v in t2)
            {
                DataRowView drv = value.DefaultView.AddNew();
                drv["ID"] = v.ID;
                drv["FullItemName"] = v.FullItemName;
                drv["Unit"] = v.Unit;
                drv["StockCode"] = v.StockCode;
                drv["BeginingBalance"] = v.BeginingBalance;
                drv["SOH"] = v.SOH;
                drv["Max"] = v.Max;
                drv["QtyPerPack"] = v.QtyPerPack;
                drv["Issued"] = v.Issued;
                drv["Received"] = v.Received;
                drv["LossAdj"] = v.LossAdj;
                drv["Quantity"] = v.Quantity;
                drv["DaysOutOfStock"] = v.DaysOutOfStock;
                drv["MaxStockQty"] = v.MaxStockQty;
            }

            return value;

        }


        //TOREMOVE: A hack because the id field is not auto increment.
        public void AddNextItem()
        {
            this.LoadFromRawSql("select max(ID) ID from Items");
            int id = this.ID;
            this.FlushData();

            this.AddNew();
            this.ID = ++id;
        }

        public int GetNextItemID()
        {
            this.LoadFromRawSql("select Max(ID) as MaxTop from Items");
            return Convert.ToInt32(this.GetColumn("MaxTop")) + 1;
        }

        public static void MergeItems(int itemToBeMergedIntoAnother, int itemUsedForMerging)
        {
            String[] tableNames ={"Disposal","IssueDoc","ReceiveDoc","YearEnd","ItemManufacturer","Items","ItemSupplier",
                                    "ItemSupplyCategory","RRFDetail","OrderDetail","PickListDetail","ProductsCategory",
                                    "ProgramProduct","DUsItemList","Exchange","InternalTransfer","Losses"};
            for (int i = 0; i < tableNames.Length; i++)
            {
                BLL.Items itm = new Items();
                string query = string.Format("Update {0} SET ItemID = {1} Where ItemID={2}", tableNames[i], itemUsedForMerging, itemToBeMergedIntoAnother);
                itm.LoadFromRawSql(query);
            }
        }

    }
}
