
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.9)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
    public abstract class _VRFDetail : SqlClientEntity
    {
        public _VRFDetail()
        {
            this.QuerySource = "VRFDetail";
            this.MappingName = "VRFDetail";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_VRFDetailLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int ID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.ID, ID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_VRFDetailLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter ID
            {
                get
                {
                    return new SqlParameter("@ID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter VRFID
            {
                get
                {
                    return new SqlParameter("@VRFID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter StoreID
            {
                get
                {
                    return new SqlParameter("@StoreID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ItemID
            {
                get
                {
                    return new SqlParameter("@ItemID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter RequestedQuantity
            {
                get
                {
                    return new SqlParameter("@RequestedQuantity", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Doses
            {
                get
                {
                    return new SqlParameter("@Doses", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter WasteFactor
            {
                get
                {
                    return new SqlParameter("@WasteFactor", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter TargetCoverage
            {
                get
                {
                    return new SqlParameter("@TargetCoverage", SqlDbType.Int, 0);
                }
            }
          
            public static SqlParameter VaccinationGiven
            {
                get
                {
                    return new SqlParameter("@VaccinationGiven", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Remark
            {
                get
                {
                    return new SqlParameter("@Remark", SqlDbType.VarChar, 100);
                }
            }


        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string ID = "ID";
            public const string VRFID = "VRFID";
            public const string StoreID = "StoreID";
            public const string ItemID = "ItemID";
            public const string RequestedQuantity = "RequestedQuantity";
            public const string Doses = "Doses";
            public const string WasteFactor = "WasteFactor";
            public const string TargetCoverage = "TargetCoverage";
            public const string VaccinationGiven = "VaccinationGiven";
            public const string Remark = "Remark";


            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _VRFDetail.PropertyNames.ID;
                    ht[VRFID] = _VRFDetail.PropertyNames.VRFID;
                    ht[StoreID] = _VRFDetail.PropertyNames.StoreID;
                    ht[ItemID] = _VRFDetail.PropertyNames.ItemID;
                    ht[RequestedQuantity] = _VRFDetail.PropertyNames.RequestedQuantity;
                    ht[Doses] = _VRFDetail.PropertyNames.Doses;
                    ht[WasteFactor] = _VRFDetail.PropertyNames.WasteFactor;
                    ht[TargetCoverage] = _VRFDetail.PropertyNames.TargetCoverage;
                    ht[VaccinationGiven] = _VRFDetail.PropertyNames.VaccinationGiven;
                    ht[Remark] = _VRFDetail.PropertyNames.Remark;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string ID = "ID";
            public const string VRFID = "VRFID";
            public const string StoreID = "StoreID";
            public const string ItemID = "ItemID";
            public const string RequestedQuantity = "RequestedQuantity";
            public const string Doses = "Doses";
            public const string WasteFactor = "WasteFactor";
            public const string TargetCoverage = "TargetCoverage";
            public const string VaccinationGiven = "VaccinationGiven";
            public const string Remark = "Remark";


            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _VRFDetail.ColumnNames.ID;
                    ht[VRFID] = _VRFDetail.ColumnNames.VRFID;
                    ht[StoreID] = _VRFDetail.ColumnNames.StoreID;
                    ht[ItemID] = _VRFDetail.ColumnNames.ItemID;
                    ht[RequestedQuantity] = _VRFDetail.ColumnNames.RequestedQuantity;
                    ht[Doses] = _VRFDetail.PropertyNames.Doses;
                    ht[WasteFactor] = _VRFDetail.PropertyNames.WasteFactor;
                    ht[TargetCoverage] = _VRFDetail.PropertyNames.TargetCoverage;
                    ht[VaccinationGiven] = _VRFDetail.PropertyNames.VaccinationGiven;
                    ht[Remark] = _VRFDetail.PropertyNames.Remark;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string ID = "s_ID";
            public const string VRFID = "s_VRFID";
            public const string StoreID = "s_StoreID";
            public const string ItemID = "s_ItemID";
            public const string RequestedQuantity = "s_RequestedQuantity";
            public const string Doses = "s_Doses";
            public const string WasteFactor = "s_WasteFactor";
            public const string TargetCoverage = "s_TargetCoverage";
            public const string VaccinationGiven = "s_VaccinationGiven";
            public const string Remark = "s_Remark";


        }
        #endregion

        #region Properties

        public virtual int ID
        {
            get
            {
                return base.Getint(ColumnNames.ID);
            }
            set
            {
                base.Setint(ColumnNames.ID, value);
            }
        }

        public virtual int VRFID
        {
            get
            {
                return base.Getint(ColumnNames.VRFID);
            }
            set
            {
                base.Setint(ColumnNames.VRFID, value);
            }
        }

        public virtual int StoreID
        {
            get
            {
                return base.Getint(ColumnNames.StoreID);
            }
            set
            {
                base.Setint(ColumnNames.StoreID, value);
            }
        }

        public virtual int ItemID
        {
            get
            {
                return base.Getint(ColumnNames.ItemID);
            }
            set
            {
                base.Setint(ColumnNames.ItemID, value);
            }
        }

        public virtual int RequestedQuantity
        {
            get
            {
                return base.Getint(ColumnNames.RequestedQuantity);
            }
            set
            {
                base.Setint(ColumnNames.RequestedQuantity, value);
            }
        }

        public virtual int Doses
        {
            get
            {
                return base.Getint(ColumnNames.Doses);
            }
            set
            {
                base.Setint(ColumnNames.Doses, value);
            }
        }

        public virtual decimal WasteFactor
        {
            get
            {
                return base.Getdecimal(ColumnNames.WasteFactor);
            }
            set
            {
                base.Setdecimal(ColumnNames.WasteFactor, value);
            }
        }

        public virtual int TargetCoverage
        {
            get
            {
                return base.Getint(ColumnNames.TargetCoverage);
            }
            set
            {
                base.Setint(ColumnNames.TargetCoverage, value);
            }
        }

        public virtual int VaccinationGiven
        {
            get
            {
                return base.Getint(ColumnNames.VaccinationGiven);
            }
            set
            {
                base.Setint(ColumnNames.VaccinationGiven, value);
            }
        }

        public virtual string Remark
        {
            get
            {
                return base.Getstring(ColumnNames.Remark);
            }
            set
            {
                base.Setstring(ColumnNames.Remark, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_ID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ID);
                else
                    this.ID = base.SetintAsString(ColumnNames.ID, value);
            }
        }

        public virtual string s_VRFID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.VRFID) ? string.Empty : base.GetintAsString(ColumnNames.VRFID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.VRFID);
                else
                    this.VRFID = base.SetintAsString(ColumnNames.VRFID, value);
            }
        }

        public virtual string s_StoreID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.StoreID) ? string.Empty : base.GetintAsString(ColumnNames.StoreID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.StoreID);
                else
                    this.StoreID = base.SetintAsString(ColumnNames.StoreID, value);
            }
        }

        public virtual string s_ItemID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ItemID) ? string.Empty : base.GetintAsString(ColumnNames.ItemID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ItemID);
                else
                    this.ItemID = base.SetintAsString(ColumnNames.ItemID, value);
            }
        }

        public virtual string s_RequestedQuantity
        {
            get
            {
                return this.IsColumnNull(ColumnNames.RequestedQuantity) ? string.Empty : base.GetintAsString(ColumnNames.RequestedQuantity);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.RequestedQuantity);
                else
                    this.RequestedQuantity = base.SetintAsString(ColumnNames.RequestedQuantity, value);
            }
        }

        public virtual string s_Doses
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Doses) ? string.Empty : base.GetintAsString(ColumnNames.Doses);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Doses);
                else
                    this.Doses = base.SetintAsString(ColumnNames.Doses, value);
            }
        }

        public virtual string s_WasteFactor
        {
            get
            {
                return this.IsColumnNull(ColumnNames.WasteFactor) ? string.Empty : base.GetdecimalAsString(ColumnNames.WasteFactor);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.WasteFactor);
                else
                    this.WasteFactor = base.SetdecimalAsString(ColumnNames.WasteFactor, value);
            }
        }

        public virtual string s_TargetCoverage
        {
            get
            {
                return this.IsColumnNull(ColumnNames.TargetCoverage) ? string.Empty : base.GetintAsString(ColumnNames.TargetCoverage);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.TargetCoverage);
                else
                    this.TargetCoverage = base.SetintAsString(ColumnNames.TargetCoverage, value);
            }
        }

       public virtual string s_VaccinationGiven
        {
            get
            {
                return this.IsColumnNull(ColumnNames.VaccinationGiven) ? string.Empty : base.GetintAsString(ColumnNames.VaccinationGiven);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.VaccinationGiven);
                else
                    this.VaccinationGiven = base.SetintAsString(ColumnNames.VaccinationGiven, value);
            }
        }

        public virtual string s_Remark
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Remark) ? string.Empty : base.GetstringAsString(ColumnNames.Remark);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Remark);
                else
                    this.Remark = base.SetstringAsString(ColumnNames.Remark, value);
            }
        }
        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter ID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter VRFID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.VRFID, Parameters.VRFID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter StoreID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.StoreID, Parameters.StoreID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ItemID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ItemID, Parameters.ItemID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter RequestedQuantity
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.RequestedQuantity, Parameters.RequestedQuantity);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Doses
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Doses, Parameters.Doses);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter WasteFactor
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.WasteFactor, Parameters.WasteFactor);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter TargetCoverage
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.TargetCoverage, Parameters.TargetCoverage);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

               public WhereParameter VaccinationGiven
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.VaccinationGiven, Parameters.VaccinationGiven);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Remark
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Remark, Parameters.Remark);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                private WhereClause _clause;
            }
            #endregion

            public WhereParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public WhereParameter VRFID
            {
                get
                {
                    if (_VRFID_W == null)
                    {
                        _VRFID_W = TearOff.VRFID;
                    }
                    return _VRFID_W;
                }
            }

            public WhereParameter StoreID
            {
                get
                {
                    if (_StoreID_W == null)
                    {
                        _StoreID_W = TearOff.StoreID;
                    }
                    return _StoreID_W;
                }
            }

            public WhereParameter ItemID
            {
                get
                {
                    if (_ItemID_W == null)
                    {
                        _ItemID_W = TearOff.ItemID;
                    }
                    return _ItemID_W;
                }
            }

            public WhereParameter RequestedQuantity
            {
                get
                {
                    if (_RequestedQuantity_W == null)
                    {
                        _RequestedQuantity_W = TearOff.RequestedQuantity;
                    }
                    return _RequestedQuantity_W;
                }
            }

            public WhereParameter Doses
            {
                get
                {
                    if (_Doses_W == null)
                    {
                        _Doses_W = TearOff.Doses;
                    }
                    return _Doses_W;
                }
            }

            public WhereParameter WasteFactor
            {
                get
                {
                    if (_WasteFactor_W == null)
                    {
                        _WasteFactor_W = TearOff.WasteFactor;
                    }
                    return _WasteFactor_W;
                }
            }

            public WhereParameter TargetCoverage
            {
                get
                {
                    if (_TargetCoverage_W == null)
                    {
                        _TargetCoverage_W = TearOff.TargetCoverage;
                    }
                    return _TargetCoverage_W;
                }
            }

          public WhereParameter VaccinationGiven
            {
                get
                {
                    if (_VaccinationGiven_W == null)
                    {
                        _VaccinationGiven_W = TearOff.VaccinationGiven;
                    }
                    return _VaccinationGiven_W;
                }
            }

             
           public WhereParameter Remark
            {
                get
                {
                    if (_Remark_W == null)
                    {
                        _Remark_W = TearOff.Remark;
                    }
                    return _Remark_W;
                }
            }
            private WhereParameter _ID_W = null;
            private WhereParameter _VRFID_W = null;
            private WhereParameter _StoreID_W = null;
            private WhereParameter _ItemID_W = null;
            private WhereParameter _RequestedQuantity_W = null;
            private WhereParameter _Doses_W = null;
            private WhereParameter _WasteFactor_W = null; 
            private WhereParameter _TargetCoverage_W = null;
            private WhereParameter _VaccinationGiven_W = null;
            private WhereParameter _Remark_W = null;

            public void WhereClauseReset()
            {
                _ID_W = null;
                _VRFID_W = null;
                _StoreID_W = null;
                _ItemID_W = null;
                _RequestedQuantity_W = null;
                _Doses_W = null;
                _WasteFactor_W = null;
                _TargetCoverage_W = null;
                _VaccinationGiven_W = null;
                _Remark_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter ID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter VRFID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.VRFID, Parameters.VRFID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter StoreID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.StoreID, Parameters.StoreID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ItemID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ItemID, Parameters.ItemID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter RequestedQuantity
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequestedQuantity, Parameters.RequestedQuantity);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Doses
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Doses, Parameters.Doses);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter WasteFactor
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.WasteFactor, Parameters.WasteFactor);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter TargetCoverage
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.TargetCoverage, Parameters.TargetCoverage);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

              public AggregateParameter VaccinationGiven
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.VaccinationGiven, Parameters.VaccinationGiven);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Remark
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Remark, Parameters.Remark);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public AggregateParameter VRFID
            {
                get
                {
                    if (_VRFID_W == null)
                    {
                        _VRFID_W = TearOff.VRFID;
                    }
                    return _VRFID_W;
                }
            }

            public AggregateParameter StoreID
            {
                get
                {
                    if (_StoreID_W == null)
                    {
                        _StoreID_W = TearOff.StoreID;
                    }
                    return _StoreID_W;
                }
            }

            public AggregateParameter ItemID
            {
                get
                {
                    if (_ItemID_W == null)
                    {
                        _ItemID_W = TearOff.ItemID;
                    }
                    return _ItemID_W;
                }
            }

            public AggregateParameter RequestedQuantity
            {
                get
                {
                    if (_RequestedQuantity_W == null)
                    {
                        _RequestedQuantity_W = TearOff.RequestedQuantity;
                    }
                    return _RequestedQuantity_W;
                }
            }

            public AggregateParameter Doses
            {
                get
                {
                    if (_Doses_W == null)
                    {
                        _Doses_W = TearOff.Doses;
                    }
                    return _Doses_W;
                }
            }

            public AggregateParameter WasteFactor
            {
                get
                {
                    if (_WasteFactor_W == null)
                    {
                        _WasteFactor_W = TearOff.WasteFactor;
                    }
                    return _WasteFactor_W;
                }
            }

            public AggregateParameter TargetCoverage
            {
                get
                {
                    if (_TargetCoverage_W == null)
                    {
                        _TargetCoverage_W = TearOff.TargetCoverage;
                    }
                    return _TargetCoverage_W;
                }
            }


           public AggregateParameter VaccinationGiven
            {
                get
                {
                    if (_TargetCoverage_W == null)
                    {
                        _VaccinationGiven_W = TearOff.VaccinationGiven;
                    }
                    return _VaccinationGiven_W;
                }
            }

            public AggregateParameter Remark
            {
                get
                {
                    if (_Remark_W == null)
                    {
                        _Remark_W = TearOff.Remark;
                    }
                    return _Remark_W;
                }
            }



            private AggregateParameter _ID_W = null;
            private AggregateParameter _VRFID_W = null;
            private AggregateParameter _StoreID_W = null;
            private AggregateParameter _ItemID_W = null;
            private AggregateParameter _RequestedQuantity_W = null;
            private AggregateParameter _Doses_W = null;
            private AggregateParameter _WasteFactor_W = null;
            private AggregateParameter _TargetCoverage_W = null;
            private AggregateParameter _VaccinationGiven_W = null;
            private AggregateParameter _Remark_W = null;

            public void AggregateClauseReset()
            {
                _ID_W = null;
                _VRFID_W = null;
                _StoreID_W = null;
                _ItemID_W = null;
                _RequestedQuantity_W = null;
                _Doses_W = null;
                _WasteFactor_W = null;
                _TargetCoverage_W = null;
                _VaccinationGiven_W = null;
                _Remark_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_VRFDetailInsert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.ID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_VRFDetailUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_VRFDetailDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.VRFID);
            p.SourceColumn = ColumnNames.VRFID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.StoreID);
            p.SourceColumn = ColumnNames.StoreID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ItemID);
            p.SourceColumn = ColumnNames.ItemID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.RequestedQuantity);
            p.SourceColumn = ColumnNames.RequestedQuantity;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Doses);
            p.SourceColumn = ColumnNames.Doses;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.WasteFactor);
            p.SourceColumn = ColumnNames.WasteFactor;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.TargetCoverage);
            p.SourceColumn = ColumnNames.TargetCoverage;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.VaccinationGiven);
            p.SourceColumn = ColumnNames.VaccinationGiven;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Remark);
            p.SourceColumn = ColumnNames.Remark;
            p.SourceVersion = DataRowVersion.Current;



            return cmd;
        }
    }
}
