
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.9)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
    public abstract class _VRF : SqlClientEntity
    {
        public _VRF()
        {
            this.QuerySource = "VRF";
            this.MappingName = "VRF";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_VRFLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int ID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.ID, ID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_VRFLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter ID
            {
                get
                {
                    return new SqlParameter("@ID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter FromMonth
            {
                get
                {
                    return new SqlParameter("@FromMonth", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter FromYear
            {
                get
                {
                    return new SqlParameter("@FromYear", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ToMonth
            {
                get
                {
                    return new SqlParameter("@ToMonth", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ToYear
            {
                get
                {
                    return new SqlParameter("@ToYear", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter DateOfSubmission
            {
                get
                {
                    return new SqlParameter("@DateOfSubmission", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter LastVRFStatus
            {
                get
                {
                    return new SqlParameter("@LastVRFStatus", SqlDbType.VarChar, 100);
                }
            }

            public static SqlParameter VRFType
            {
                get
                {
                    return new SqlParameter("@VRFType", SqlDbType.Int, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string ID = "ID";
            public const string FromMonth = "FromMonth";
            public const string FromYear = "FromYear";
            public const string ToMonth = "ToMonth";
            public const string ToYear = "ToYear";
            public const string DateOfSubmission = "DateOfSubmission";
            public const string LastVRFStatus = "LastVRFStatus";
            public const string VRFType = "VRFType";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _VRF.PropertyNames.ID;
                    ht[FromMonth] = _VRF.PropertyNames.FromMonth;
                    ht[FromYear] = _VRF.PropertyNames.FromYear;
                    ht[ToMonth] = _VRF.PropertyNames.ToMonth;
                    ht[ToYear] = _VRF.PropertyNames.ToYear;
                    ht[DateOfSubmission] = _VRF.PropertyNames.DateOfSubmission;
                    ht[LastVRFStatus] = _VRF.PropertyNames.LastVRFStatus;
                    ht[VRFType] = _VRF.PropertyNames.VRFType;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string ID = "ID";
            public const string FromMonth = "FromMonth";
            public const string FromYear = "FromYear";
            public const string ToMonth = "ToMonth";
            public const string ToYear = "ToYear";
            public const string DateOfSubmission = "DateOfSubmission";
            public const string LastVRFStatus = "LastVRFStatus";
            public const string VRFType = "VRFType";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _VRF.ColumnNames.ID;
                    ht[FromMonth] = _VRF.ColumnNames.FromMonth;
                    ht[FromYear] = _VRF.ColumnNames.FromYear;
                    ht[ToMonth] = _VRF.ColumnNames.ToMonth;
                    ht[ToYear] = _VRF.ColumnNames.ToYear;
                    ht[DateOfSubmission] = _VRF.ColumnNames.DateOfSubmission;
                    ht[LastVRFStatus] = _VRF.ColumnNames.LastVRFStatus;
                    ht[VRFType] = _VRF.ColumnNames.VRFType;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string ID = "s_ID";
            public const string FromMonth = "s_FromMonth";
            public const string FromYear = "s_FromYear";
            public const string ToMonth = "s_ToMonth";
            public const string ToYear = "s_ToYear";
            public const string DateOfSubmission = "s_DateOfSubmission";
            public const string LastVRFStatus = "s_LastVRFStatus";
            public const string VRFType = "s_VRFType";

        }
        #endregion

        #region Properties

        public virtual int ID
        {
            get
            {
                return base.Getint(ColumnNames.ID);
            }
            set
            {
                base.Setint(ColumnNames.ID, value);
            }
        }

        public virtual int FromMonth
        {
            get
            {
                return base.Getint(ColumnNames.FromMonth);
            }
            set
            {
                base.Setint(ColumnNames.FromMonth, value);
            }
        }

        public virtual int FromYear
        {
            get
            {
                return base.Getint(ColumnNames.FromYear);
            }
            set
            {
                base.Setint(ColumnNames.FromYear, value);
            }
        }

        public virtual int ToMonth
        {
            get
            {
                return base.Getint(ColumnNames.ToMonth);
            }
            set
            {
                base.Setint(ColumnNames.ToMonth, value);
            }
        }

        public virtual int ToYear
        {
            get
            {
                return base.Getint(ColumnNames.ToYear);
            }
            set
            {
                base.Setint(ColumnNames.ToYear, value);
            }
        }

        public virtual DateTime DateOfSubmission
        {
            get
            {
                return base.GetDateTime(ColumnNames.DateOfSubmission);
            }
            set
            {
                base.SetDateTime(ColumnNames.DateOfSubmission, value);
            }
        }

        public virtual string LastVRFStatus
        {
            get
            {
                return base.Getstring(ColumnNames.LastVRFStatus);
            }
            set
            {
                base.Setstring(ColumnNames.LastVRFStatus, value);
            }
        }

        public virtual int VRFType
        {
            get
            {
                return base.Getint(ColumnNames.VRFType);
            }
            set
            {
                base.Setint(ColumnNames.VRFType, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_ID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ID);
                else
                    this.ID = base.SetintAsString(ColumnNames.ID, value);
            }
        }

        public virtual string s_FromMonth
        {
            get
            {
                return this.IsColumnNull(ColumnNames.FromMonth) ? string.Empty : base.GetintAsString(ColumnNames.FromMonth);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.FromMonth);
                else
                    this.FromMonth = base.SetintAsString(ColumnNames.FromMonth, value);
            }
        }

        public virtual string s_FromYear
        {
            get
            {
                return this.IsColumnNull(ColumnNames.FromYear) ? string.Empty : base.GetintAsString(ColumnNames.FromYear);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.FromYear);
                else
                    this.FromYear = base.SetintAsString(ColumnNames.FromYear, value);
            }
        }

        public virtual string s_ToMonth
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ToMonth) ? string.Empty : base.GetintAsString(ColumnNames.ToMonth);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ToMonth);
                else
                    this.ToMonth = base.SetintAsString(ColumnNames.ToMonth, value);
            }
        }

        public virtual string s_ToYear
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ToYear) ? string.Empty : base.GetintAsString(ColumnNames.ToYear);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ToYear);
                else
                    this.ToYear = base.SetintAsString(ColumnNames.ToYear, value);
            }
        }

        public virtual string s_DateOfSubmission
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DateOfSubmission) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateOfSubmission);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DateOfSubmission);
                else
                    this.DateOfSubmission = base.SetDateTimeAsString(ColumnNames.DateOfSubmission, value);
            }
        }

        public virtual string s_LastVRFStatus
        {
            get
            {
                return this.IsColumnNull(ColumnNames.LastVRFStatus) ? string.Empty : base.GetstringAsString(ColumnNames.LastVRFStatus);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.LastVRFStatus);
                else
                    this.LastVRFStatus = base.SetstringAsString(ColumnNames.LastVRFStatus, value);
            }
        }

        public virtual string s_VRFType
        {
            get
            {
                return this.IsColumnNull(ColumnNames.VRFType) ? string.Empty : base.GetintAsString(ColumnNames.VRFType);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.VRFType);
                else
                    this.VRFType = base.SetintAsString(ColumnNames.VRFType, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter ID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter FromMonth
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.FromMonth, Parameters.FromMonth);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter FromYear
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.FromYear, Parameters.FromYear);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ToMonth
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ToMonth, Parameters.ToMonth);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ToYear
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ToYear, Parameters.ToYear);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DateOfSubmission
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DateOfSubmission, Parameters.DateOfSubmission);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter LastVRFStatus
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.LastVRFStatus, Parameters.LastVRFStatus);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter VRFType
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.VRFType, Parameters.VRFType);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public WhereParameter FromMonth
            {
                get
                {
                    if (_FromMonth_W == null)
                    {
                        _FromMonth_W = TearOff.FromMonth;
                    }
                    return _FromMonth_W;
                }
            }

            public WhereParameter FromYear
            {
                get
                {
                    if (_FromYear_W == null)
                    {
                        _FromYear_W = TearOff.FromYear;
                    }
                    return _FromYear_W;
                }
            }

            public WhereParameter ToMonth
            {
                get
                {
                    if (_ToMonth_W == null)
                    {
                        _ToMonth_W = TearOff.ToMonth;
                    }
                    return _ToMonth_W;
                }
            }

            public WhereParameter ToYear
            {
                get
                {
                    if (_ToYear_W == null)
                    {
                        _ToYear_W = TearOff.ToYear;
                    }
                    return _ToYear_W;
                }
            }

            public WhereParameter DateOfSubmission
            {
                get
                {
                    if (_DateOfSubmission_W == null)
                    {
                        _DateOfSubmission_W = TearOff.DateOfSubmission;
                    }
                    return _DateOfSubmission_W;
                }
            }

            public WhereParameter LastVRFStatus
            {
                get
                {
                    if (_LastVRFStatus_W == null)
                    {
                        _LastVRFStatus_W = TearOff.LastVRFStatus;
                    }
                    return _LastVRFStatus_W;
                }
            }

            public WhereParameter VRFType
            {
                get
                {
                    if (_VRFType_W == null)
                    {
                        _VRFType_W = TearOff.VRFType;
                    }
                    return _VRFType_W;
                }
            }

            private WhereParameter _ID_W = null;
            private WhereParameter _FromMonth_W = null;
            private WhereParameter _FromYear_W = null;
            private WhereParameter _ToMonth_W = null;
            private WhereParameter _ToYear_W = null;
            private WhereParameter _DateOfSubmission_W = null;
            private WhereParameter _LastVRFStatus_W = null;
            private WhereParameter _VRFType_W = null;

            public void WhereClauseReset()
            {
                _ID_W = null;
                _FromMonth_W = null;
                _FromYear_W = null;
                _ToMonth_W = null;
                _ToYear_W = null;
                _DateOfSubmission_W = null;
                _LastVRFStatus_W = null;
                _VRFType_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter ID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter FromMonth
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.FromMonth, Parameters.FromMonth);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter FromYear
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.FromYear, Parameters.FromYear);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ToMonth
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ToMonth, Parameters.ToMonth);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ToYear
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ToYear, Parameters.ToYear);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DateOfSubmission
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateOfSubmission, Parameters.DateOfSubmission);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter LastVRFStatus
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastVRFStatus, Parameters.LastVRFStatus);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter VRFType
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.VRFType, Parameters.VRFType);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public AggregateParameter FromMonth
            {
                get
                {
                    if (_FromMonth_W == null)
                    {
                        _FromMonth_W = TearOff.FromMonth;
                    }
                    return _FromMonth_W;
                }
            }

            public AggregateParameter FromYear
            {
                get
                {
                    if (_FromYear_W == null)
                    {
                        _FromYear_W = TearOff.FromYear;
                    }
                    return _FromYear_W;
                }
            }

            public AggregateParameter ToMonth
            {
                get
                {
                    if (_ToMonth_W == null)
                    {
                        _ToMonth_W = TearOff.ToMonth;
                    }
                    return _ToMonth_W;
                }
            }

            public AggregateParameter ToYear
            {
                get
                {
                    if (_ToYear_W == null)
                    {
                        _ToYear_W = TearOff.ToYear;
                    }
                    return _ToYear_W;
                }
            }

            public AggregateParameter DateOfSubmission
            {
                get
                {
                    if (_DateOfSubmission_W == null)
                    {
                        _DateOfSubmission_W = TearOff.DateOfSubmission;
                    }
                    return _DateOfSubmission_W;
                }
            }

            public AggregateParameter LastVRFStatus
            {
                get
                {
                    if (_LastVRFStatus_W == null)
                    {
                        _LastVRFStatus_W = TearOff.LastVRFStatus;
                    }
                    return _LastVRFStatus_W;
                }
            }

            public AggregateParameter VRFType
            {
                get
                {
                    if (_VRFType_W == null)
                    {
                        _VRFType_W = TearOff.VRFType;
                    }
                    return _VRFType_W;
                }
            }

            private AggregateParameter _ID_W = null;
            private AggregateParameter _FromMonth_W = null;
            private AggregateParameter _FromYear_W = null;
            private AggregateParameter _ToMonth_W = null;
            private AggregateParameter _ToYear_W = null;
            private AggregateParameter _DateOfSubmission_W = null;
            private AggregateParameter _LastVRFStatus_W = null;
            private AggregateParameter _VRFType_W = null;

            public void AggregateClauseReset()
            {
                _ID_W = null;
                _FromMonth_W = null;
                _FromYear_W = null;
                _ToMonth_W = null;
                _ToYear_W = null;
                _DateOfSubmission_W = null;
                _LastVRFStatus_W = null;
                _VRFType_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_VRFInsert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.ID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_VRFUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_VRFDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.FromMonth);
            p.SourceColumn = ColumnNames.FromMonth;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.FromYear);
            p.SourceColumn = ColumnNames.FromYear;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ToMonth);
            p.SourceColumn = ColumnNames.ToMonth;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ToYear);
            p.SourceColumn = ColumnNames.ToYear;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DateOfSubmission);
            p.SourceColumn = ColumnNames.DateOfSubmission;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.LastVRFStatus);
            p.SourceColumn = ColumnNames.LastVRFStatus;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.VRFType);
            p.SourceColumn = ColumnNames.VRFType;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}
